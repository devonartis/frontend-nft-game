{"version":3,"sources":["Components/SelectCharacter/index.js","assets/twitter-logo.svg","App.js","constants.js","index.js"],"names":["SelectCharacter","setCharacterNFT","className","TWITTER_HANDLE","TWITTER_LINK","App","useState","currentAccount","setCurrentAccount","characterNFT","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWalletAction","alert","useEffect","fetchNFTMetadata","provider","ethers","providers","Web3Provider","signer","getSigner","gameContract","Contract","myEpicGame","abi","checkIfUserHasNFT","txn","name","characterData","imageURI","hp","toNumber","maxHp","attackDamage","src","alt","onClick","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"u6uFAceA,EARS,SAAC,GAAwB,EAAtBC,gBACzB,OACE,qBAAKC,UAAU,6BAAf,SACE,0ECTS,MAA0B,yCCSnCC,EAAiB,cACjBC,EAAY,8BAA0BD,GAqK7BE,EAnKH,WAEV,MAA4CC,mBAAS,MAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBR,EAArB,KAEMS,EAAwB,uCAAG,kCAAAC,EAAA,oEAERC,OAAbC,EAFqB,EAErBA,SAFqB,uBAK3BC,QAAQC,IAAI,gCALe,0BAQ3BD,QAAQC,IAAI,8BAA+BF,GARhB,wBAWNA,EAASG,QAAQ,CAAEC,OAAQ,iBAXrB,QAaL,KAFlBC,EAXuB,QAahBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5CZ,EAAkBY,IAElBN,QAAQC,IAAI,+BAlBe,kDAqB7BD,QAAQC,IAAR,MArB6B,0DAAH,qDA6DxBM,EAAmB,uCAAG,gCAAAV,EAAA,oEAEHC,OAAbC,EAFgB,EAEhBA,SAFgB,uBAKtBS,MAAM,iBALgB,0CAYDT,EAASG,QAAQ,CACtCC,OAAQ,wBAbc,OAYlBC,EAZkB,OAmBxBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCV,EAAkBU,EAAS,IApBH,kDAsBxBJ,QAAQC,IAAR,MAtBwB,0DAAH,qDAiEzB,OAvCAQ,qBAAU,WACRb,MACC,IAEHa,qBAAU,WAIR,IAAMC,EAAgB,uCAAG,kCAAAb,EAAA,6DACvBG,QAAQC,IAAI,yCAA0CR,GAEhDkB,EAAW,IAAIC,IAAOC,UAAUC,aAAahB,OAAOC,UACpDgB,EAASJ,EAASK,YAClBC,EAAe,IAAIL,IAAOM,SCrHb,6CDuHjBC,EAAWC,IACXL,GARqB,SAWLE,EAAaI,oBAXR,QAWjBC,EAXiB,QAYfC,MACNvB,QAAQC,IAAI,0BACZd,ECxHC,CACLoC,MAF4BC,EDyHeF,GCvHvBC,KACpBE,SAAUD,EAAcC,SACxBC,GAAIF,EAAcE,GAAGC,WACrBC,MAAOJ,EAAcI,MAAMD,WAC3BE,aAAcL,EAAcK,aAAaF,cDqHrC3B,QAAQC,IAAI,0BAhBS,iCC3GE,IAACuB,ID2GH,OAAH,qDAuBlB/B,IACFO,QAAQC,IAAI,kBAAmBR,GAC/BiB,OAED,CAACjB,IAKF,qBAAKL,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,uBAAb,wDACA,mBAAGA,UAAU,WAAb,+CACA,sBAAKA,UAAU,2BAAf,UACE,qBACE0C,IAAI,kEACJC,IAAI,qBArGXtC,EAkBMA,IAAmBE,EACrB,cAAC,EAAD,CAAiBR,gBAAiBA,SADpC,EAhBH,sBAAKC,UAAU,2BAAf,UACE,qBACE0C,IAAI,kEACJC,IAAI,qBAEN,wBACE3C,UAAU,mCACV4C,QAASzB,EAFX,oDAuGA,sBAAKnB,UAAU,mBAAf,UACE,qBAAK2C,IAAI,eAAe3C,UAAU,eAAe0C,IAAKG,IACtD,mBACE7C,UAAU,cACV8C,KAAM5C,EACN6C,OAAO,SACPC,IAAI,aAJN,6BAKe/C,cEnKzBgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c38d97db.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Divine Hero. Choose wisely.</h2>\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n\n","export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import { ethers } from 'ethers';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport twitterLogo from './assets/twitter-logo.svg';\n\n// Constants\nconst TWITTER_HANDLE = 'tdevonartis';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account:', account);\n        setCurrentAccount(account);\n      } else {\n        console.log('No authorized account found');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*\n  * Conditional Rendering \n  */\n\n   // Render Methods\nconst renderContent = () => {\n  /*\n   * Scenario #1\n   */\n  if (!currentAccount) {\n    return (\n      <div className=\"connect-wallet-container\">\n        <img\n          src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n          alt=\"Monty Python Gif\"\n        />\n        <button\n          className=\"cta-button connect-wallet-button\"\n          onClick={connectWalletAction}\n        >\n          Connect Wallet To Get Started\n        </button>\n      </div>\n    );\n    /*\n     * Scenario #2\n     */\n  } else if (currentAccount && !characterNFT) {\n    return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n  }\n};\n   \n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n  \n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n  \n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      }else {\n        console.log(\"No character NFT found\");\n      }\n    };\n  \n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n          <div className=\"connect-wallet-container\">\n            <img\n              src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n              alt=\"Monty Python Gif\"\n            />\n            {/*\n             * Button that we will use to trigger wallet connect\n             * Don't forget to add the onClick event to call your method!\n             */}\n            {renderContent()}\n          </div>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const CONTRACT_ADDRESS = '0x6fCAfF7a82C45C93d78B32E7a09FCAfAfb2749a8';\n\n/*\n * Add this method and make sure to export it on the bottom!\n */\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}